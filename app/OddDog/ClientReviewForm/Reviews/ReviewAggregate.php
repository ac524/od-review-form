<?php


namespace OdReviewForm\OddDog\ClientReviewForm\Reviews;


use OdReviewForm\Core\WpOptions\WpJsonOption;
use OdReviewForm\Core\WpOptions\WpOption;
use OdReviewForm\OddDog\ClientReviewForm\Locations\Locations;
use OdReviewForm\OddDog\ClientReviewForm\Plugin;

class ReviewAggregate extends WpJsonOption
{

    public $average;

    public $count;

    protected $optionName = 'odrf_aggregate';

    protected $locationId;

    /** @var ReviewAggregate */
    private static $instance;

    /** @var ReviewAggregate[]  */
    private static $locations = [];

    /**
     * @param string $locationId
     * @return ReviewAggregate
     */
    public static function getLocationInstance( string $locationId ) : self
    {
        if( ! isset( self::$locations[ $locationId ] ) ) {

            self::$locations[ $locationId ] = new self( false );

            self::$locations[ $locationId ]->locationId = $locationId;

            self::$locations[ $locationId ]->optionName .= '_' . $locationId;

            self::$locations[ $locationId ]->load();

        }

        return self::$locations[ $locationId ];
    }

    /**
     * @return ReviewAggregate
     */
    public static function getInstance( bool $autoload = true ): WpOption
    {
        if( null === self::$instance )

            self::$instance = new self( $autoload );

        return self::$instance;
    }

    public static function clearAll()
    {
        self::getInstance()->clear();

        foreach ( Locations::instance()->keys() as $locationId )

            self::getLocationInstance( $locationId )->clear();
    }

    public function load(): WpOption
    {
        parent::load(); // TODO: Change the autogenerated stub

        if( ! $this->hasData() )

            $this->compileData();

        return $this;
    }

    public function hasData() : bool
    {
        return ! empty( $this->average );
    }

    public function clear()
    {
        $this->average = null;
        $this->count = null;

        $this->save();
    }

    public function setCount( $count )
    {
        $this->count = (int)$count;
    }


    public function setAverage( $average )
    {
        $this->average = (float)$average;
    }

    public function compileData() : void
    {
        global $wpdb;

        $publishedReviewIdsQuery = $wpdb->prepare( "SELECT ID FROM {$wpdb->posts} WHERE post_type = %s AND post_status = 'publish'", Plugin::instance()->getComponent( 'OdReviewsPostType' )->postType );

        $query = $wpdb->prepare( "SELECT COUNT(*) as count, AVG(meta_value) as average FROM {$wpdb->postmeta} WHERE meta_key = %s AND post_id IN ( $publishedReviewIdsQuery )", Review::RATING_META_KEY );

        if( ! empty( $this->locationId ) ) {

            $locationReviewIdsQuery = $wpdb->prepare( "SELECT post_id FROM {$wpdb->postmeta} WHERE meta_key = %s AND meta_value = %s", Review::LOCATION_META_KEY, $this->locationId );

            $query .= " AND post_id IN( {$locationReviewIdsQuery} )";

        }

        $results = $wpdb->get_row( $query, ARRAY_A );

//        var_dump( $results );
//        die();

        $this->updateProperties( $results );

        $this->save();
    }

}